#ifndef MC_LOOKUP_TABLE_H
#define MC_LOOKUP_TABLE_H

// the marching cubes lookup table

float MCVertices[12][3] = {
	{0.5, 0.0, 0.0}, // edge between 0 and 1 - 1
	{0.0, 0.5, 0.0}, // edge between 0 and 2 - 2
	{0.0, 0.0, 0.5}, // edge between 0 and 3 - 3
	{1.0, 0.5, 0.0}, // edge between 1 and 4 - 4
	{1.0, 0.0, 0.5}, // edge between 1 and 6 - 5
	{0.5, 1.0, 0.0}, // edge between 2 and 4 - 6
	{0.0, 1.0, 0.5}, // edge between 2 and 5 - 7
	{0.0, 0.5, 1.0}, // edge between 3 and 5 - 8
	{0.5, 0.0, 1.0}, // edge between 3 and 6 - 9 
	{1.0, 1.0, 0.5}, // edge between 4 and 7 - 10
	{0.5, 1.0, 1.0}, // edge between 5 and 7 - 11
	{1.0, 0.5, 1.0}  // edge between 6 and 7 - 12
};


// layout is GL_TRIANGLES
// first index is number of vertices
// encoded as c strings, so last number must be zero
// indices are 1-indexed, so subtract one when getting the appropriate vertex (since zero is used to terminate)
// TODO: these are all out of order... dammit...
#define PLACEHOLDER { 3,  2,  1,  0},
char MCIndices[256][13] = {
	{ 0}, // no vertices set
	{ 3,  2,  1,  0}, // 0 - 00000001
	{ 5,  4,  1,  0}, // 1 - 00000010
	{ 2,  4,  3,  5,  3,  4,  0}, // 0 1 - 00000011
	{ 7,  6,  2,  0}, // 2 - 00000100
	{ 1,  3,  7,  7,  6,  1,  0}, // 0 2 - 00000101
	{ 7,  6,  3,  3,  6,  4,  4,  5,  3,  0}, // 0 1 2 - 00000111
	{ 9,  8,  3,  0}, // 3 - 00001000
	{ 1,  2,  8,  8,  9,  1,  0}, // 0 3 - 00001001
	{ 2,  8,  9,  9,  5,  2,  2,  5,  4,  0}, // 0 1 3 - 00001011
	{ 6,  2,  3,  3,  9,  6,  6,  9,  8,  8,  7,  6,  0}, // 2 3 - 00001100
	{ 6,  1,  9,  9,  8,  6,  6,  8,  7,  0}, // 0 2 3 - 00001101
	{ 1,  2,  3,  5,  6,  9,  9,  6,  8,  8,  6,  7,  0}, // 1 2 3 - 00001110
	{ 5,  4,  9,  9,  4,  6,  6,  8,  9,  6,  7,  8,  0}, // 0 1 2 3 - 00001111
	{10,  6,  4,  0}, // 4
	{ 1,  3,  2,  4, 10,  6,  0}, // 0 4 - 00010001
	{ 5,  3,  2,  2,  6,  5,  5,  6, 10,  0}, // 0 1 4 - 00010011
	{ 2,  7, 10, 10,  4,  2,  0}, // 2 4 - 00010100
	{                             // 0 2 4 - 00010101 
	{11,  8,  7,  0}, // 5
	{12,  9,  5,  0}, // 6
	{12, 11, 10,  0}, // 7
	{ 0,  6, 10, 10,  5,  0,  0}, // 1 4
	{ 1,  4, 12, 12,  9,  1,  0}, // 1 6
	{ 6, 11,  8,  8,  2,  6,  0}, // 2 5
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
	PLACEHOLDER
};

float* MCGetVertex(int vertex_id)
{
	return MCVertices[vertex_id-1];
}

#endif
